{"version":3,"sources":["src/app/_shared/constants.ts","src/app/_shared/components/robot/robot.component.ts","src/app/_shared/components/robot/robot.component.html","src/app/_shared/components/tabletop/tabletop.component.ts","src/app/_shared/components/tabletop/tabletop.component.html","src/app/_pages/robot-simulator/robot-simulator-disabled-button.directive.ts","node_modules/@ngrx/signals/fesm2022/ngrx-signals.mjs","src/app/_store/robot-simulator/robot-simulator.helpers.ts","src/app/_store/robot-simulator/robot-simulator.store.ts","src/app/_pages/robot-simulator/robot-simulator.component.ts","src/app/_pages/robot-simulator/robot-simulator.component.html"],"sourcesContent":["export const DIRECTIONS = {\r\n  NORTH: 'NORTH',\r\n  SOUTH: 'SOUTH',\r\n  EAST: 'EAST',\r\n  WEST: 'WEST',\r\n};\r\n\r\nexport const DIRECTION_MAP = {\r\n  [DIRECTIONS.NORTH]: { x: 0, y: 1 },\r\n  [DIRECTIONS.SOUTH]: { x: 0, y: -1 },\r\n  [DIRECTIONS.EAST]: { x: 1, y: 0 },\r\n  [DIRECTIONS.WEST]: { x: -1, y: 0 },\r\n};\r\n\r\nexport type DirectionType = (typeof DIRECTIONS)[keyof typeof DIRECTIONS];\r\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  input,\n  output,\n} from '@angular/core';\nimport { NgClass } from '@angular/common';\n\n@Component({\n  selector: 'app-robot',\n  standalone: true,\n  imports: [NgClass],\n  templateUrl: './robot.component.html',\n  styleUrl: './robot.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RobotComponent {\n  /**\n   * The robot's position on the grid.\n   * The cell is an object with x, y, and direction properties.\n   * The direction property is optional and determines if the robot is in the cell and facing a specific direction.\n   */\n  cell = input.required<{\n    x: number;\n    y: number;\n    direction?: string;\n  }>();\n\n  /**\n   * Emits the position of the robot when it is placed on the grid.\n   */\n  placeRobot = output<{ x: number; y: number }>();\n}\n","<div\r\n  class=\"grid-cell\"\r\n  ngClass=\"robot--{{ cell().direction?.toLowerCase() }}\"\r\n  (click)=\"placeRobot.emit({ x: cell().x!, y: cell().y! })\"\r\n  title=\"Place Robot\"\r\n  data-cy=\"robot-cell\"\r\n></div>\r\n","import {\n  ChangeDetectionStrategy,\n  Component,\n  input,\n  output,\n} from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { RobotComponent } from '../robot/robot.component';\n\n@Component({\n  selector: 'app-tabletop',\n  standalone: true,\n  imports: [NgClass, RobotComponent],\n  templateUrl: './tabletop.component.html',\n  styleUrl: './tabletop.component.scss',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TabletopComponent {\n  /**\n   * The grid for the tabletop.\n   * The grid is a two-dimensional array of cells. Each cell is an object with x, y, and direction properties.\n   * The direction property is optional and determines if the robot is in the cell and facing a specific direction.\n   */\n  grid =\n    input.required<\n      { x: number; y: number; direction: string | undefined }[][]\n    >();\n\n  /**\n   * Emits the position of the robot when it is placed on the grid.\n   */\n  placeRobot = output<{ x: number; y: number }>();\n}\n","<div class=\"grid-container\" data-cy=\"tabletop\">\r\n  <div class=\"grid\" data-cy=\"tabletop-grid\">\r\n    @for (row of grid(); track row) {\r\n      <div class=\"grid-row\">\r\n        @for (cell of row; track cell) {\r\n          <app-robot [cell]=\"cell\" (placeRobot)=\"placeRobot.emit($event)\"></app-robot>\r\n        }\r\n      </div>\r\n    }\r\n  </div>\r\n</div>\r\n","import {\n  Directive,\n  ElementRef,\n  inject,\n  input,\n  OnChanges,\n  Renderer2,\n  SimpleChanges,\n} from '@angular/core';\n\n/**\n * Directive to disable a button when the robot is not placed on the grid.\n * It also sets the title attribute to show a tooltip when the button is disabled.\n */\n@Directive({\n  selector: '[appRobotSimulatorDisabledButton]',\n  standalone: true,\n})\nexport class RobotSimulatorDisabledButtonDirective implements OnChanges {\n  appRobotSimulatorDisabledButton = input<boolean>();\n  title = input<string>('Please place the robot first');\n\n  #renderer = inject(Renderer2);\n  #el = inject(ElementRef);\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['appRobotSimulatorDisabledButton']) {\n      this.#updateDisabledState();\n      this.#updateTitle();\n    }\n  }\n\n  #updateDisabledState() {\n    const isDisabled = this.appRobotSimulatorDisabledButton();\n    if (isDisabled) {\n      this.#renderer.setStyle(this.#el.nativeElement, 'cursor', 'not-allowed');\n      this.#renderer.setProperty(this.#el.nativeElement, 'disabled', true);\n    } else {\n      this.#renderer.setStyle(this.#el.nativeElement, 'cursor', 'pointer');\n      this.#renderer.setProperty(this.#el.nativeElement, 'disabled', false);\n    }\n  }\n\n  #updateTitle() {\n    const tooltip = this.title();\n    if (tooltip) {\n      this.#renderer.setAttribute(this.#el.nativeElement, 'title', tooltip);\n    } else {\n      this.#renderer.removeAttribute(this.#el.nativeElement, 'title');\n    }\n  }\n}\n","import * as i0 from '@angular/core';\nimport { untracked, isSignal, computed, assertInInjectionContext, inject, Injector, DestroyRef, signal, Injectable } from '@angular/core';\nfunction toDeepSignal(signal) {\n  const value = untracked(() => signal());\n  if (!isRecord(value)) {\n    return signal;\n  }\n  return new Proxy(signal, {\n    get(target, prop) {\n      if (!(prop in value)) {\n        return target[prop];\n      }\n      if (!isSignal(target[prop])) {\n        Object.defineProperty(target, prop, {\n          value: computed(() => target()[prop]),\n          configurable: true\n        });\n      }\n      return toDeepSignal(target[prop]);\n    }\n  });\n}\nfunction isRecord(value) {\n  return value?.constructor === Object;\n}\nfunction deepComputed(computation) {\n  return toDeepSignal(computed(computation));\n}\nconst STATE_WATCHERS = new WeakMap();\nconst STATE_SOURCE = Symbol('STATE_SOURCE');\nfunction patchState(stateSource, ...updaters) {\n  stateSource[STATE_SOURCE].update(currentState => updaters.reduce((nextState, updater) => ({\n    ...nextState,\n    ...(typeof updater === 'function' ? updater(nextState) : updater)\n  }), currentState));\n  notifyWatchers(stateSource);\n}\nfunction getState(stateSource) {\n  return stateSource[STATE_SOURCE]();\n}\nfunction watchState(stateSource, watcher, config) {\n  if (!config?.injector) {\n    assertInInjectionContext(watchState);\n  }\n  const injector = config?.injector ?? inject(Injector);\n  const destroyRef = injector.get(DestroyRef);\n  addWatcher(stateSource, watcher);\n  watcher(getState(stateSource));\n  const destroy = () => removeWatcher(stateSource, watcher);\n  destroyRef.onDestroy(destroy);\n  return {\n    destroy\n  };\n}\nfunction getWatchers(stateSource) {\n  return STATE_WATCHERS.get(stateSource[STATE_SOURCE]) || [];\n}\nfunction notifyWatchers(stateSource) {\n  const watchers = getWatchers(stateSource);\n  for (const watcher of watchers) {\n    const state = untracked(() => getState(stateSource));\n    watcher(state);\n  }\n}\nfunction addWatcher(stateSource, watcher) {\n  const watchers = getWatchers(stateSource);\n  STATE_WATCHERS.set(stateSource[STATE_SOURCE], [...watchers, watcher]);\n}\nfunction removeWatcher(stateSource, watcher) {\n  const watchers = getWatchers(stateSource);\n  STATE_WATCHERS.set(stateSource[STATE_SOURCE], watchers.filter(w => w !== watcher));\n}\nfunction signalState(initialState) {\n  const stateSource = signal(initialState);\n  const signalState = toDeepSignal(stateSource.asReadonly());\n  Object.defineProperty(signalState, STATE_SOURCE, {\n    value: stateSource\n  });\n  return signalState;\n}\nfunction signalStore(...args) {\n  const signalStoreArgs = [...args];\n  const config = typeof signalStoreArgs[0] === 'function' ? {} : signalStoreArgs.shift();\n  const features = signalStoreArgs;\n  class SignalStore {\n    constructor() {\n      const innerStore = features.reduce((store, feature) => feature(store), getInitialInnerStore());\n      const {\n        stateSignals,\n        computedSignals,\n        methods,\n        hooks\n      } = innerStore;\n      const storeMembers = {\n        ...stateSignals,\n        ...computedSignals,\n        ...methods\n      };\n      this[STATE_SOURCE] = innerStore[STATE_SOURCE];\n      for (const key in storeMembers) {\n        this[key] = storeMembers[key];\n      }\n      const {\n        onInit,\n        onDestroy\n      } = hooks;\n      if (onInit) {\n        onInit();\n      }\n      if (onDestroy) {\n        inject(DestroyRef).onDestroy(onDestroy);\n      }\n    }\n    /** @nocollapse */\n    static ɵfac = function SignalStore_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || SignalStore)();\n    };\n    /** @nocollapse */\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: SignalStore,\n      factory: SignalStore.ɵfac,\n      providedIn: config.providedIn || null\n    });\n  }\n  (() => {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(SignalStore, [{\n      type: Injectable,\n      args: [{\n        providedIn: config.providedIn || null\n      }]\n    }], () => [], null);\n  })();\n  return SignalStore;\n}\nfunction getInitialInnerStore() {\n  return {\n    [STATE_SOURCE]: signal({}),\n    stateSignals: {},\n    computedSignals: {},\n    methods: {},\n    hooks: {}\n  };\n}\nfunction signalStoreFeature(featureOrInput, ...restFeatures) {\n  const features = typeof featureOrInput === 'function' ? [featureOrInput, ...restFeatures] : restFeatures;\n  return inputStore => features.reduce((store, feature) => feature(store), inputStore);\n}\nfunction type() {\n  return undefined;\n}\nfunction assertUniqueStoreMembers(store, newMemberKeys) {\n  if (!ngDevMode) {\n    return;\n  }\n  const storeMembers = {\n    ...store.stateSignals,\n    ...store.computedSignals,\n    ...store.methods\n  };\n  const overriddenKeys = Object.keys(storeMembers).filter(memberKey => newMemberKeys.includes(memberKey));\n  if (overriddenKeys.length > 0) {\n    console.warn('@ngrx/signals: SignalStore members cannot be overridden.', 'Trying to override:', overriddenKeys.join(', '));\n  }\n}\nfunction withComputed(signalsFactory) {\n  return store => {\n    const computedSignals = signalsFactory({\n      ...store.stateSignals,\n      ...store.computedSignals\n    });\n    assertUniqueStoreMembers(store, Object.keys(computedSignals));\n    return {\n      ...store,\n      computedSignals: {\n        ...store.computedSignals,\n        ...computedSignals\n      }\n    };\n  };\n}\nfunction withHooks(hooksOrFactory) {\n  return store => {\n    const storeMembers = {\n      [STATE_SOURCE]: store[STATE_SOURCE],\n      ...store.stateSignals,\n      ...store.computedSignals,\n      ...store.methods\n    };\n    const hooks = typeof hooksOrFactory === 'function' ? hooksOrFactory(storeMembers) : hooksOrFactory;\n    const createHook = name => {\n      const hook = hooks[name];\n      const currentHook = store.hooks[name];\n      return hook ? () => {\n        if (currentHook) {\n          currentHook();\n        }\n        hook(storeMembers);\n      } : currentHook;\n    };\n    return {\n      ...store,\n      hooks: {\n        onInit: createHook('onInit'),\n        onDestroy: createHook('onDestroy')\n      }\n    };\n  };\n}\nfunction withMethods(methodsFactory) {\n  return store => {\n    const methods = methodsFactory({\n      [STATE_SOURCE]: store[STATE_SOURCE],\n      ...store.stateSignals,\n      ...store.computedSignals,\n      ...store.methods\n    });\n    assertUniqueStoreMembers(store, Object.keys(methods));\n    return {\n      ...store,\n      methods: {\n        ...store.methods,\n        ...methods\n      }\n    };\n  };\n}\nfunction withState(stateOrFactory) {\n  return store => {\n    const state = typeof stateOrFactory === 'function' ? stateOrFactory() : stateOrFactory;\n    const stateKeys = Object.keys(state);\n    assertUniqueStoreMembers(store, stateKeys);\n    store[STATE_SOURCE].update(currentState => ({\n      ...currentState,\n      ...state\n    }));\n    const stateSignals = stateKeys.reduce((acc, key) => {\n      const sliceSignal = computed(() => store[STATE_SOURCE]()[key]);\n      return {\n        ...acc,\n        [key]: toDeepSignal(sliceSignal)\n      };\n    }, {});\n    return {\n      ...store,\n      stateSignals: {\n        ...store.stateSignals,\n        ...stateSignals\n      }\n    };\n  };\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { deepComputed, getState, patchState, signalState, signalStore, signalStoreFeature, type, watchState, withComputed, withHooks, withMethods, withState };\n","import { DIRECTIONS, DirectionType } from '../../_shared/constants';\n\nexport type RobotSimulatorState = {\n  x: number | undefined;\n  y: number | undefined;\n  direction: DirectionType | undefined;\n  gridSize: number | undefined;\n};\n\n/**\n * Returns true if the robot is on the grid and within the bounds of the grid.\n */\nexport function isRobotOnGrid({\n  x,\n  y,\n  gridSize,\n}: Omit<RobotSimulatorState, 'direction'>): boolean {\n  return (\n    x !== undefined &&\n    y !== undefined &&\n    gridSize !== undefined &&\n    x >= 0 &&\n    x < gridSize &&\n    y >= 0 &&\n    y < gridSize\n  );\n}\n\n/**\n * Returns true if the robot is placed on the grid.\n */\nexport function isRobotPlaced({\n  x,\n  y,\n  direction,\n}: RobotSimulatorState): boolean {\n  return x !== undefined && y !== undefined && direction !== undefined;\n}\n\n/**\n * Generates the grid for the tabletop.\n */\nexport function generateGrid(\n  x: number | undefined,\n  y: number | undefined,\n  direction: DirectionType | undefined,\n  gridSize: number | undefined\n) {\n  const size = gridSize;\n  if (!size) return [];\n\n  return Array.from({ length: size }, (_, rowIndex) =>\n    Array.from({ length: size }, (_, colIndex) => {\n      const adjustedY = size - 1 - rowIndex;\n      return x === colIndex && adjustedY === y\n        ? { x: colIndex, y: adjustedY, direction }\n        : { x: colIndex, y: adjustedY, direction: undefined };\n    })\n  );\n}\n\n/**\n * Rotates the direction of the robot.\n */\nexport function rotateDirection(\n  direction: DirectionType,\n  isLeft: boolean\n): DirectionType {\n  const directions = [\n    DIRECTIONS.NORTH,\n    DIRECTIONS.EAST,\n    DIRECTIONS.SOUTH,\n    DIRECTIONS.WEST,\n  ];\n  const currentIndex = directions.indexOf(direction);\n  const nextIndex = isLeft\n    ? (currentIndex + 3) % directions.length\n    : (currentIndex + 1) % directions.length;\n  return directions[nextIndex];\n}\n","import {\n  patchState,\n  signalStore,\n  withComputed,\n  withMethods,\n  withState,\n} from '@ngrx/signals';\nimport { computed } from '@angular/core';\nimport {\n  generateGrid,\n  isRobotOnGrid,\n  isRobotPlaced,\n  RobotSimulatorState,\n  rotateDirection,\n} from './robot-simulator.helpers';\nimport { DIRECTION_MAP } from '../../_shared/constants';\n\n/**\n * The initial state for the robot simulator.\n * The x, y, and direction properties are undefined until the robot is placed on the grid.\n * The gridSize property is undefined until the grid size is set.\n */\nconst initialState: RobotSimulatorState = {\n  x: undefined,\n  y: undefined,\n  direction: undefined,\n  gridSize: undefined,\n};\n\nexport const RobotSimulatorStore = signalStore(\n  withState(initialState),\n  withComputed(({ x, y, direction, gridSize }) => ({\n    /**\n     * Returns true if the robot is placed on the grid.\n     */\n    isPlaced: computed(() =>\n      isRobotPlaced({\n        x: x(),\n        y: y(),\n        direction: direction(),\n        gridSize: gridSize(),\n      })\n    ),\n    /**\n     * Returns true if the robot is on the grid and within the bounds of the grid.\n     */\n    isOnGrid: computed(() =>\n      isRobotOnGrid({ x: x(), y: y(), gridSize: gridSize() })\n    ),\n    /**\n     * Returns the report of the robot's position and direction.\n     */\n    report: computed(() => `${x()},${y()},${direction()}`),\n    /**\n     * Returns the grid for the tabletop. The grid is a two-dimensional array of cells.\n     * Each cell is an object with x, y, and direction properties.\n     * The direction property is optional and determines if the robot is in the cell and facing a specific direction.\n     */\n    grid: computed(() => generateGrid(x(), y(), direction(), gridSize())),\n    /**\n     * Returns the robot's position on the grid. The cell is an object with x, y, and direction properties.\n     * The direction property is optional and determines if the robot is in the cell and facing a specific direction.\n     */\n    position: computed(() => ({ x: x(), y: y(), direction: direction() })),\n  })),\n  withMethods((store) => ({\n    /**\n     * Sets the grid size for the tabletop.\n     */\n    setGridSize(size: number) {\n      patchState(store, (state) => ({ ...state, gridSize: size }));\n    },\n    /**\n     * Places the robot on the grid.\n     */\n    place({ x, y, direction }: Omit<RobotSimulatorState, 'gridSize'>) {\n      return patchState(store, (state) => {\n        if (!state.gridSize) {\n          console.warn('Grid size must be set before placing the robot.');\n          return state;\n        }\n        return { ...state, x, y, direction };\n      });\n    },\n    /**\n     * Moves the robot one unit in the direction it is facing.\n     * The robot cannot move off the grid.\n     */\n    move() {\n      return patchState(store, (state) => {\n        if (!store.isPlaced()) {\n          console.warn('Robot is not placed. Please place the robot first.');\n          return state;\n        }\n        const { x, y, direction, gridSize } = state;\n        if (isRobotPlaced({ x, y, direction, gridSize })) {\n          const { x: xDirection, y: yDirection } = DIRECTION_MAP[direction!];\n          const newX = x! + xDirection;\n          const newY = y! + yDirection;\n\n          if (isRobotOnGrid({ x: newX, y: newY, gridSize })) {\n            return { ...state, x: newX, y: newY };\n          } else {\n            console.warn(\n              'Move is out of bounds. The robot cannot move off the grid.'\n            );\n          }\n        }\n        return state;\n      });\n    },\n    /**\n     * Rotates the robot 90 degrees to the left\n     */\n    rotateLeft() {\n      return patchState(store, (state) => {\n        if (!store.isPlaced()) {\n          console.warn('Robot is not placed. Please place the robot first.');\n          return state;\n        }\n        const { direction } = state;\n        if (direction) {\n          return { ...state, direction: rotateDirection(direction, true) }; // Rotate left\n        }\n        return state;\n      });\n    },\n    /**\n     * Rotates the robot 90 degrees to the right\n     */\n    rotateRight() {\n      return patchState(store, (state) => {\n        if (!store.isPlaced()) {\n          console.error('Robot is not placed. Please place the robot first.');\n          return state;\n        }\n        const { direction } = state;\n        if (direction) {\n          return { ...state, direction: rotateDirection(direction, false) }; // Rotate right\n        }\n        return state;\n      });\n    },\n  }))\n);\n","import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  HostListener,\r\n  inject,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { DIRECTIONS } from '../../_shared/constants';\r\nimport { TabletopComponent } from '../../_shared/components/tabletop/tabletop.component';\r\nimport { RobotSimulatorDisabledButtonDirective } from './robot-simulator-disabled-button.directive';\r\nimport { RobotSimulatorStore } from '../../_store/robot-simulator/robot-simulator.store';\r\n\r\n@Component({\r\n  selector: 'app-robot-simulator',\r\n  standalone: true,\r\n  imports: [NgClass, TabletopComponent, RobotSimulatorDisabledButtonDirective],\r\n  templateUrl: './robot-simulator.component.html',\r\n  styleUrl: './robot-simulator.component.scss',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [RobotSimulatorStore],\r\n})\r\nexport class RobotSimulatorComponent implements OnInit {\r\n  store = inject(RobotSimulatorStore);\r\n  grid = this.store.grid;\r\n  isRobotPlaced = this.store.isPlaced;\r\n\r\n  @HostListener('document:keydown', ['$event'])\r\n  onKeydown(event: KeyboardEvent) {\r\n    switch (event.key) {\r\n      case 'ArrowUp':\r\n        this.store.move();\r\n        break;\r\n      case 'ArrowDown':\r\n        this.store.rotateRight();\r\n        this.store.rotateRight();\r\n        break;\r\n      case 'ArrowLeft':\r\n        this.store.rotateLeft();\r\n        break;\r\n      case 'ArrowRight':\r\n        this.store.rotateRight();\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.store.setGridSize(5);\r\n  }\r\n\r\n  report() {\r\n    alert(this.store.report());\r\n  }\r\n\r\n  placeRobot(x: number, y: number) {\r\n    this.store.place({ x, y, direction: DIRECTIONS.NORTH });\r\n  }\r\n\r\n  moveRobot() {\r\n    this.store.move();\r\n  }\r\n\r\n  rotateRobotLeft() {\r\n    this.store.rotateLeft();\r\n  }\r\n\r\n  rotateRobotRight() {\r\n    this.store.rotateRight();\r\n  }\r\n}\r\n","<div class=\"header\" data-cy=\"header\">\r\n  Click to place the robot, use the buttons or arrows to move\r\n</div>\r\n\r\n<app-tabletop\r\n  [grid]=\"grid()\"\r\n  (placeRobot)=\"placeRobot($event.x, $event.y)\"\r\n></app-tabletop>\r\n\r\n<div class=\"controls\">\r\n  <button [appRobotSimulatorDisabledButton]=\"!isRobotPlaced()\" (click)=\"rotateRobotLeft()\" data-cy=\"left-button\">Left</button>\r\n  <button [appRobotSimulatorDisabledButton]=\"!isRobotPlaced()\" (click)=\"moveRobot()\" data-cy=\"move-button\">Move</button>\r\n  <button [appRobotSimulatorDisabledButton]=\"!isRobotPlaced()\" (click)=\"rotateRobotRight()\" data-cy=\"right-button\">Right</button>\r\n</div>\r\n\r\n<div class=\"report-button\">\r\n  <button [appRobotSimulatorDisabledButton]=\"!isRobotPlaced()\" (click)=\"report()\" data-cy=\"report-button\">Report</button>\r\n</div>\r\n"],"mappings":"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","names":["signal","_"],"x_google_ignoreList":[6]}